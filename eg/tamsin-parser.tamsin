# Parser for Tamsin AST, written in Tamsin.
# Distributed under a BSD-style license; see LICENSE.

main = grammar using $.tamsin.


# problem: we can't use `word`, `variable` etc in here, because those
# scan using the char scanner.  we have already scanned them using
# tamsin_scanner.


# problem #2: does the production scanner we're using to scan
# "pass through" eof correctly, so that we see an eof too?


grammar    = {"@" & pragma & "."} & production & "." & {production & "."} & eof.
production = word & ["(" & term & {"," & term} & ")"
                    | "[" & expr0 & "]"] & "=" & expr0.
expr0      = expr1 & {("|" | "||") & expr1}.
expr1      = expr2 & {("&" | "&&") & expr2}.
expr2      = expr3 & ["using" & prodref].
expr3      = expr4 & [("→" | "->") & variable].
expr4      = "(" & expr0 & ")"
           | "[" & expr0 & "]"
           | "{" & expr0 & "}"
           | "!" & expr0
           | "set" & variable & "=" & term
           | "return" & term
           | "fail" & term
           | terminal
           | prodref & ["(" & [term & {"," & term}] & ")"] & ["@" & term].
term       = term0.
term0      = term1 & {"+" & term1}.
term1      = atom & ["(" & [term & {"," & term}] & ")"]
           | variable.
atom       = word | str('\'').
terminal   = str('"')
           | ("«" | "<<") & term & ("»" | ">>").
prodref    = [modref & "."] & word.
modref     = "$".
pragma     = "alias" & word & word & "=" & prodref
           | "unalias" & word.
