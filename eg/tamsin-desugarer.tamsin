# Desugarer for Tamsin AST, written in Tamsin.
# Distributed under a BSD-style license; see LICENSE.

# REQUIRES lib/tamsin_scanner.tamsin
# REQUIRES lib/tamsin_parser.tamsin

# Note that this may contain support for some features which are not in
# the current released or pre-released version.

main = tamsin_parser:parse → AST & {" " | "\n" } & eof &
       desugar(AST) → AST & $:repr(AST).

desugar_all(list(H,T)) =
    desugar(H) → DH &
    desugar_all(T) → DT &
    return list(DH, DT).
desugar_all(nil) = 'nil'.

desugar(program(L)) = desugar_all(L) → DL & return program(DL).
desugar(module(N, L)) = desugar_all(L) → DL & return module(N, DL).
desugar(production(N, F, E)) = desugar(E) → DE & return production(N, F, DE).
desugar(or(L, R)) = desugar(L) → DL & desugar(R) → DR & return or(DL, DR).
desugar(and(L, R)) = desugar(L) → DL & desugar(R) → DR & return and(DL, DR).
desugar(not(X)) = desugar(X) → DX & return not(DX).
desugar(while(X)) = desugar(X) → DX & return while(DX).
desugar(concat(L, R)) = desugar(L) → DL & desugar(R) → DR & return concat(DL, DR).
desugar(using(R, P)) = desugar(R) → DR & return using(DR, P).

desugar(send(R, V)) = desugar(R) → DR & return send(DR, V).
desugar(set(V, T)) = desugar(T) → DT & return set(V, DT).

desugar(fold(R, I)) =
    desugar(R) → DR &
    SET ← set('_1', I) &
    SEND ← send(DR, '_2') &
    CAT ← '_1' + '_2' &
    ACC ← set('_1', CAT) &
    RET ← call(prodref('$', 'return'), list('_1', nil)) &
    return and(and(SET, while(and(SEND, ACC))), RET).

desugar(Else) = Else.

